openapi: 3.1.0
info:
  title: TradingCards Read-Only API
  version: 0.1.3
servers:
  - url: http://localhost:3000/api/v1
paths:
  /sets:
    get:
      summary: Liste aller Sets
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: #/components/schemas/Set
  /cards:
    get:
      summary: Karten (paginierte Antwort)
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 24 }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: #/components/schemas/PaginatedCards
  /cards/{id}:
    get:
      summary: Kartendetail
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: #/components/schemas/Card
        404:
          description: Not found
  /prices/snapshot:
    get:
      summary: Preis-Snapshots
      parameters:
        - in: query
          name: cardId
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: #/components/schemas/Price
components:
  schemas:
    Set:
      type: object
      required: [id, name, release_date]
      properties:
        id: { type: string }
        name: { type: string }
        release_date: { type: string, format: date }
    Card:
      type: object
      required: [id, set_id]
      properties:
        id: { type: string }
        set_id: { type: string }
        player: { type: [string,null] }
        franchise: { type: [string,null] }
        number: { type: [string,null] }
        variant: { type: [string,null] }
        rarity: { type: [string,null] }
    Price:
      type: object
      required: [id, card_id, source, currency, price, collected_at]
      properties:
        id: { type: string }
        card_id: { type: string }
        source: { type: string }
        currency: { type: string }
        price: { type: number }
        collected_at: { type: string, format: date-time }
    PaginatedCards:
      type: object
      required: [items, total, page, pageSize]
      properties:
        items:
          type: array
          items: { $ref: #/components/schemas/Card }
        total: { type: integer }
        page: { type: integer }
        pageSize: { type: integer }